Console

<div id="output">
</div>

</br>

Working
</br>
<a id="validate-token-link">
	Validate Token
</a>
<br>
<a id="playlists-json-link">
	Request Playlists
</a>
</br>
</br>

Todo
</br>

</br>

</br>
<a id="send-JSON-to-Rails-Controller">
	Send JSON to Rails Controller
</a>

<ul id="friends-list">	
</ul>

<button id="validate-token">
	Validate Token
</button>

<button id="add-friend">
	Add Friend
</button>

<script language="javascript" type="text/javascript"> 
	var hash_values_str = jQuery.param.fragment(); // get the current URL's hash values
	var hash_values_json = jQuery.deparam(hash_values_str); // convert hash values into JSON object
	var hash_values_json_str = JSON.stringify(hash_values_json); // convert JSON object into string 
	var validate_token_link = "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + hash_values_json.access_token;
	var playlists_JSON_link = "https://gdata.youtube.com/feeds/api/users/default/playlists?v=2&alt=json&access_token=" + hash_values_json.access_token;
	var playlists_JSON;
	
	// setting links
	$("#validate-token-link").attr("href", validate_token_link);
	// todo: make an ajax call to validate token
	$("#playlists-json-link").attr("href", playlists_JSON_link);
	// todo: send JSON to rails controller to store in DB
	
	// ajax requests
	// XMLHttpRequest cannot load https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.AHES6ZRUyKNtc8orqv5tCQCTm9lUTZAM8HZB9S6_ER-89StgdQaOX3k. Origin http://localhost:3000 is not allowed by Access-Control-Allow-Origin.
	// it tries to reload to their site
	$.ajax({
	  	url:      validate_token_link,
	  	dataType: 'json',
	  	success:  function(data) {
						playlists_JSON = data;
	  					$("#output").append("<li>" + data + "</li>");
			   	  },
	  	error:    function(jqXHR, textStatus, errorThrown) {
						$("#output").append("<li>" + "validate token AJAX request failed" + "</li>");
				  		$("#output").append("<li>" + jqXHR + "</li>");
						$("#output").append("<li>" + textStatus + "</li>");
						$("#output").append("<li>" + errorThrown + "</li>");
	  		   	  }
	});
	
	$.getJSON(playlists_JSON_link, function(json) {
		playlists_JSON = json;
		feed = json.feed;
		$("#output").append("<li>" + "request playlist AJAX request succeeded" + "</li>");
	    $("#output").append("<li>" + json.version + "</li>");
		$("#output").append("<li>" + json.feed.title.$t + "</li>");
		$("#output").append("<li>" + json.feed.author[0].name.$t + "</li>");
		for (i = 0; i < json.feed.entry.length; i++) {
			$("#output").append("<li>" + json.feed.entry[i].title.$t + "</li>");
			$("#output").append("<li>" + json.feed.entry[i].content.src + "</li>");
			
		}
	});
	
	document.write (hash_values_json_str);
	// to-do
	// If the user refused to grant access to your application, Google will have included the access_denied error message in the
	// hash fragment of the redirect_uri: http://localhost/oauth2callback#error=access_denied
	document.write("</br>");
	
	// validate the token returned
	document.write(validate_token_link);
	
	document.write ("</br>");
	document.write (document.location.href); 
	document.write ("</br>");
	document.write (document.location.hash); 

	// link for testing environment
	var googleLoginLink    = "https://accounts.google.com/o/oauth2/auth?";
	var client_id          = "client_id=908038792880-vm3862hmpnp7u6gnmgd8104g8u7r1sr1.apps.googleusercontent.com";
	var redirect_uri       = "redirect_uri=http://localhost:3000/oauth2callback";
	var gscope             = "scope=https://gdata.youtube.com";
	var response_type      = "response_type=token";
	var googleLoginLink    = googleLoginLink + client_id + '&' + redirect_uri + '&' + gscope + '&' + response_type;
	
	// to-do
	// link for production environment

	(function ($) {
		$.ajaxSetup ({
			cache: false
		});

		Friend               = Backbone.Model.extend({
			//Create a model to hold friend atribute
			name: null
		});

		Friends              = Backbone.Collection.extend({
			//This is our Friends collection and holds our Friend models
			initialize: function (models, options) {
				this.bind("add", options.view.addFriendLi);
				//Listen for new additions to the collection and call a view function if so
			}
		});

		AppView              = Backbone.View.extend({
			el: $("body"),
			initialize: function () {
				this.friends     = new Friends( null, { view: this });
				//Create a friends collection when the view is initialized.
				//Pass it a reference to this view to create a connection between the two
			},
			events: {
				"click #add-friend":  "showPrompt",
				"click #validate-token":  "validateToken",
			},
			showPrompt: function () {
				var friend_name  = prompt("Who is your friend?");
				var friend_model = new Friend({ name: friend_name });
				//Add a new friend model to our friend collection
				this.friends.add( friend_model );
			},
			validateToken: function() {
				$("#validate-token-link").append("<li>" + "getAccessToken called" + "</li>");
				$("#friends-list").append("<li>" + "getAccessToken called" + "</li>");
				jQuery.ajax(googleLoginLink);
				$.ajax({ type: "GET", url: validate_token_link, dataType: "jsonp", success: readData(data) });
			},
			addFriendLi: function (model) {
				//The parameter passed is a reference to the model that was added
				$("#friends-list").append("<li>" + model.get('name') + "</li>");
				//Use .get to receive attributes of the model
			}
		});

		var appview = new AppView;
		})(jQuery);

</script>

